package com.mdfecioru.traffic_gen_okhttp.httpclient;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.mdfecioru.traffic_gen_okhttp.gendata.RandomPerson;
import io.prometheus.client.Counter;
import com.mdfecioru.traffic_gen_okhttp.model.Person;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;

@Component
public class HttpClient {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    static final Counter requests = Counter.build()
            .name("traffic_gen_requests").help("Total number of requests generated by the traffic generator")
            .labelNames("status").register();

    public void generateData() {

        OkHttpClient client = new OkHttpClient();

        ObjectMapper objectMapper = new ObjectMapper();
        SimpleDateFormat df = new SimpleDateFormat("yyydd-MM-dd");
        objectMapper.setDateFormat(df);
        // This is needed to support serialization of the TimeLocal type
        objectMapper.registerModule(new JavaTimeModule());

        for (;;) {
            Person person = RandomPerson.next();
            String personJSON = null;

            try {
                personJSON = objectMapper.writeValueAsString(person);
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }

            logger.info("The following person was generated: " + personJSON);

            RequestBody requestBody = RequestBody.create(
                    personJSON,
                    MediaType.parse("application/json")
            );

            Request postRequest = new Request.Builder()
                    .url("http://localhost:8080/person")
                    .post(requestBody)
                    .build();

            try {
                logger.info("Generating a request");
                requests.labels("generated").inc();
                Response response = client.newCall(postRequest).execute();
                logger.info("Received response: " + response.code() + " -- " + response.body().string());
            } catch (IOException e) {
                logger.error("Exception was triggered after firing the http POST call!!!");
                requests.labels("failed").inc();
                e.printStackTrace();
            }

            try {
                TimeUnit.MILLISECONDS.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

}
